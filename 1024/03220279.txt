・Lisp
前置記法などが特徴などプログラミング言語である。また、LISPは「式指向」の言語である。他の多くの言語とは違って、式と文は区別されず、すべてのコードとデータは式として書き下される。式が評価されたとき、それは値（または値のリスト）を生成する。式は他の式に埋め込める。
（参照：https://ja.wikipedia.org/wiki/LISP）

・幾何モデリング
複雑な形状を作図したいときに、作図データを考えるのではなく、単純な形状を組み合わせてその形状を構成する方法を考える、というもの。
（参照：https://www.nakanihon.co.jp/gijyutsu/Shimada/Computational%20geometry/chapter060203.html#:~:text=%E8%A4%87%E9%9B%91%E3%81%AA%E5%BD%A2%E7%8A%B6%E3%82%92%E4%BD%9C%E5%9B%B3,%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F%E3%80%82）


・MapReduce
MapReduce（マップリデュース）は、コンピュータ機器のクラスター上での巨大なデータセットに対する分散コンピューティングを支援する目的で、Googleによって2004年に導入されたプログラミングモデルである。
Mapステップで、マスターノードは入力データを受けとり、それをより細かい単位に分割し、複数のワーカーノードに配置する。受け取ったワーカーノードが、更に細かい単位に分割し、他の複数のワーカーノードに配置するという、より深い階層構造の分割を行うこともある。そして、各ワーカーノードは、その細かい単位のデータを処理し、処理結果を、マスターノードへと返す。

Reduceステップでは、 マスターノードが、Mapステップでの処理結果を集約し、目的としていた問題に対する答え（結果）を何らかの方法によって出力する。

MapReduceの特徴は、MapとReduceの各ステップで並列処理が可能であることで、Map処理は、ほかのMap処理と完全独立で、理論的にはすべて並列実行できる。続くReduceステップでは、Mapステップでの処理結果がキーごとにまとめられてReduce処理に送られることになるが、これも同様に並列処理が可能である。
（参照：https://ja.wikipedia.org/wiki/MapReduce）



やはりPythonやCと書式が違うのでなかなかなれない。ただ、プログラムを書く上での考え方は通ずるものがあると思うので、もっとしっかり勉強していきたい。
また、irteusglでは、過去のコマンド履歴やTabキーによる補完ができなかった。少し不便だなと感じた。（ただ、先生の画面共有を見る限りできそう？）


また、課題２に関しては、まずは先生が授業中に紹介してくださったものをそっくりそのまま書いた。そうすることで、理解が進んだように感じる。そして、それを応用して、四則演算に拡張してみた。
