配布資料2.3のActionファイルのところで、書いてあるとおりにすすめていって最後にcatkin buildをすると、

Errors     << beginner_tutorials:check /home/mech-user/catkin_ws/logs/beginner_tutorials/build.check\
.008.log
CMake Error at /opt/ros/melodic/share/genmsg/cmake/genmsg-extras.cmake:98 (message):
  generate_messages() must be called after add_message_files()
Call Stack (most recent call first):
  CMakeLists.txt:111 (add_message_files)


make: *** [cmake_check_build_system] Error 1

というエラーが出た。

いろいろ調べ、generate_message()等を消してもう一度cakin buildをしてみるなどしたが、原因がどうにもわからなかったので、もういちどpackageから作り直してみた。すると、うまくいった。



次に、課題１について。
まずは、gitにのってあるものを参考に、new_teleop_twist_keyboardというパッケージをつくり、CMakeListやpackage.xmlを書き換えていった。
そして、catkin buildをしたあとに、
rosrun new_teleop_keyboard teleop_keyboard.py
とすると、
[rospack]Error: package'new_teleop_keyboard' not found
とでたので、色々調べた結果、
source ~/catkin_ws/devel/setup.bashとコマンドラインで入力した。すると、上のエラーはなくなった。
(参考：https://stackoverflow.com/questions/56139647/how-to-fix-rospack-error-package-my-package-not-found )


すると次は、
mech-user@ki00104:~/catkin_ws/src/new_teleop_twist_keyboard$ rosrun new_teleop_twist_keyboard teleop_twist_keyboard.py
[rosrun] Couldn't find executable named teleop_twist_keyboard.py below /home/mech-user/catkin_ws/src/new_teleop_twist_keyboard
[rosrun] Found the following, but they're either not files,
[rosrun] or not executable:
[rosrun]   /home/mech-user/catkin_ws/src/new_teleop_twist_keyboard/teleop_twist_keyboard.py

というエラーが出てきた。そこで、ファイル名の前にchmod +x をつけて実行権限を付与してあげると（バトルシップで出てきた！）、うまくいった。
（参考：https://www.theconstructsim.com/ros-qa-084-found-following-theyre-either-not-files-not-exe/）




つぎに、わからなかったため調べていったことを書いていく。

遠隔手続き呼び出し：
プログラムから、別のアドレス空間（通常、共有ネットワーク上の別のコンピュータ上）にあるサブルーチンや手続きを実行することを可能にするプログラム。その際、遠隔相互作用の詳細を明示的にコーディングする必要がなく、プログラマはローカルなサブルーチン呼び出しと同様なコードをリモート呼び出しについても行う。
（参照：https://ja.wikipedia.org/wiki/%E9%81%A0%E9%9A%94%E6%89%8B%E7%B6%9A%E3%81%8D%E5%91%BC%E5%87%BA%E3%81%97）


ROSにおけるトピックとメッセージ：
トピックはノード間をつなぐデータバスのような働きを持つ。送信側ノードがメッセージをトピックへ発行し、そのメッセージの受信待ちをしている受信側ノードがトピックからメッセージを取り込む。

メッセージはトピックへ情報を流すための情報の塊で、標準的なものはROSで定義されている。また、ユーザ固有のメッセージも定義可能。
メッセージを使った通信の実態は1対1の通信だが、論理的には１対多ノードの通信。１つのノードが送信したメッセージは複数のノードで受信出来る。
ただし、送信側ノードがメッセージを送信した後、受信側ノードからの受信確認が無い非同期通信になる。
（参照：http://forestofazumino.web.fc2.com/ros/ros_basics.html）


